name: "Cielo Red Agent"
description: "AI-powered GitHub automation with specialized agents for different SDLC roles"
author: "cielo-red"
branding:
  icon: "users"
  color: "orange"

inputs:
  # Agent selection
  agent:
    description: "Specific agent to use (developer, architect, security, qa, devops, performance, frontend, backend, lead, manager). If not specified, Claude will determine the best agent."
    required: false
    default: ""

  # Task/prompt
  task:
    description: "Task or prompt for the agent to execute"
    required: true

  # Authentication
  anthropic_api_key:
    description: "Anthropic API key"
    required: false
  claude_code_oauth_token:
    description: "Claude Code OAuth token (alternative to anthropic_api_key)"
    required: false
  github_token:
    description: "GitHub token with necessary permissions"
    required: false

  # Configuration
  claude_args:
    description: "Additional arguments to pass to Claude"
    required: false
    default: ""
  base_branch:
    description: "Base branch for operations"
    required: false
    default: "main"

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Determine agent to use
      id: select-agent
      shell: bash
      run: |
        # If agent is specified, use it
        if [ -n "${{ inputs.agent }}" ]; then
          echo "agent=${{ inputs.agent }}" >> $GITHUB_OUTPUT
          echo "Using specified agent: ${{ inputs.agent }}"
        else
          # Use Claude to determine the best agent
          echo "Asking Claude to determine the best agent..."

          # Create a temporary file with the agent selection prompt
          cat > /tmp/agent-selector-prompt.txt << 'EOF'
        Based on this task, determine which specialized agent would be best suited to handle it. Choose ONLY ONE from: developer, architect, security, qa, devops, performance, frontend, backend, lead, manager.

        Task: ${{ inputs.task }}

        Consider:
        - developer: For general coding, bug fixes, feature implementation
        - architect: For system design, architectural decisions, refactoring
        - security: For security reviews, vulnerability fixes, authentication
        - qa: For testing, test writing, quality assurance
        - devops: For CI/CD, deployment, infrastructure
        - performance: For optimization, performance improvements
        - frontend: For UI/UX, client-side code
        - backend: For APIs, server-side code, databases
        - lead: For technical decisions, code reviews, team coordination
        - manager: For project management, task breakdown, team orchestration

        Respond with ONLY the agent name, nothing else.
        EOF

          # Let Claude determine the agent (we'll use a simple Claude call)
          # For now, default to developer if we can't determine
          echo "agent=developer" >> $GITHUB_OUTPUT
          echo "Defaulting to developer agent (Claude selection to be implemented)"
        fi

    - name: Check for agent file
      id: check-agent
      shell: bash
      run: |
        AGENT="${{ steps.select-agent.outputs.agent }}"

        # First check in the repository
        if [ -f ".cielo/agents/${AGENT}.md" ]; then
          echo "found=true" >> $GITHUB_OUTPUT
          echo "path=.cielo/agents/${AGENT}.md" >> $GITHUB_OUTPUT
          echo "Found agent file in repository: .cielo/agents/${AGENT}.md"
        elif [ -f ".github/agents/${AGENT}.md" ]; then
          echo "found=true" >> $GITHUB_OUTPUT
          echo "path=.github/agents/${AGENT}.md" >> $GITHUB_OUTPUT
          echo "Found agent file in repository: .github/agents/${AGENT}.md"
        else
          # Fallback to action repository agents
          echo "found=false" >> $GITHUB_OUTPUT
          echo "Agent file not found in repository, will use default"
        fi

    - name: Read agent prompt
      id: read-prompt
      shell: bash
      run: |
        AGENT="${{ steps.select-agent.outputs.agent }}"

        if [ "${{ steps.check-agent.outputs.found }}" == "true" ]; then
          # Read from repository
          AGENT_PROMPT=$(cat "${{ steps.check-agent.outputs.path }}")
        else
          # Use default agent prompts
          case "$AGENT" in
            developer)
              AGENT_PROMPT="You are a software developer. Focus on writing clean, maintainable code, fixing bugs, and implementing features. Follow best practices and existing patterns in the codebase."
              ;;
            architect)
              AGENT_PROMPT="You are a software architect. Focus on system design, architectural patterns, and structural improvements. Consider scalability, maintainability, and design patterns."
              ;;
            security)
              AGENT_PROMPT="You are a security engineer. Focus on identifying and fixing security vulnerabilities, implementing secure coding practices, and ensuring data protection."
              ;;
            qa)
              AGENT_PROMPT="You are a QA engineer. Focus on testing, test coverage, and quality assurance. Write comprehensive tests and identify edge cases."
              ;;
            devops)
              AGENT_PROMPT="You are a DevOps engineer. Focus on CI/CD, deployment, infrastructure as code, and operational excellence."
              ;;
            performance)
              AGENT_PROMPT="You are a performance engineer. Focus on optimization, performance improvements, and efficient algorithms."
              ;;
            frontend)
              AGENT_PROMPT="You are a frontend engineer. Focus on UI/UX, client-side code, responsive design, and user experience."
              ;;
            backend)
              AGENT_PROMPT="You are a backend engineer. Focus on APIs, server-side logic, databases, and system integration."
              ;;
            lead)
              AGENT_PROMPT="You are a technical lead. Focus on technical decisions, code quality, best practices, and mentoring."
              ;;
            manager)
              AGENT_PROMPT="You are a project manager. Focus on task coordination, project planning, and team orchestration."
              ;;
            *)
              AGENT_PROMPT="You are a software engineer. Complete the requested task using best practices."
              ;;
          esac
        fi

        # Combine agent prompt with user task
        FULL_PROMPT="${AGENT_PROMPT}

        Task to complete: ${{ inputs.task }}"

        echo "prompt<<EOF" >> $GITHUB_OUTPUT
        echo "$FULL_PROMPT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Execute agent with Claude
      uses: anthropics/claude-code-action@v1
      with:
        anthropic_api_key: ${{ inputs.anthropic_api_key }}
        claude_code_oauth_token: ${{ inputs.claude_code_oauth_token }}
        github_token: ${{ inputs.github_token || github.token }}
        prompt: ${{ steps.read-prompt.outputs.prompt }}
        claude_args: ${{ inputs.claude_args }}
        base_branch: ${{ inputs.base_branch }}

outputs:
  agent_used:
    description: "The agent that was used for this execution"
    value: ${{ steps.select-agent.outputs.agent }}
  agent_source:
    description: "Where the agent prompt was loaded from (repository or default)"
    value: ${{ steps.check-agent.outputs.found == 'true' && 'repository' || 'default' }}